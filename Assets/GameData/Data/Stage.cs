using System;

public class Stage
{
    public delegate void StageStartHandler();
    public event StageStartHandler OnStageStart;

    public delegate void StageEndHandler();
    public event StageEndHandler OnStageEnd;

    public int Id { get; set; }
    public bool IsRunning { get; private set; }
    public float Score { get; set; }
    public DateTime StartTime { get; private set; }
    public DateTime EndTime { get; private set; }

    public virtual void Start()
    {
        if (IsRunning)
            throw new Exception("Stage is already running.");

        OnStageStart?.Invoke();
        StartTime = DateTime.Now;
        UnityEngine.Debug.Log($"Stage {Id} initialized.");
        IsRunning = true;
    }

    public virtual void Stop()
    {
        if (!IsRunning)
            return;

        OnStageEnd?.Invoke();
        EndTime = DateTime.Now;
        UnityEngine.Debug.Log($"Stage {Id} terminated.");
        IsRunning = false;
    }
}

public class PlataformStage : Stage
{
    public float GameLevel => (10f / 27) * 100;

    public int HeightLevel
    {
        get
        {
            switch (Id)
            {
                case 1:
                case 2:
                    return 1;
                case 3:
                case 4:
                    return 2;
                case 5:
                case 6:
                    return 3;
                default:
                    return 0;
            }
        }
    }

    public int SizeLevel
    {
        get
        {
            switch (Id)
            {
                case 4:
                case 5:
                    return 1;
                case 6:
                case 7:
                    return 2;
                case 8:
                case 9:
                    return 3;
                default:
                    return 0;
            }
        }
    }

    public int IntervalLevel
    {
        get
        {
            switch (Id)
            {
                case 1:
                case 4:
                case 7:
                    return 1;
                case 2:
                case 5:
                case 8:
                    return 2;
                case 3:
                case 6:
                case 9:
                    return 3;
                default:
                    return 0;
            }
        }
    }

    /// <summary>
    /// Stage time limit
    /// </summary>
    public int TimeLimit { get; private set; }

    /// <summary>
    /// Objects to spawn during the game
    /// </summary>
    public int SpawnQuantitity { get; private set; }

    /// <summary>
    /// Maximum score generated by a Spawner Object
    /// </summary>
    public float SpawnedScore { get; set; }

    /// <summary>
    /// Elements used on the game.
    /// </summary>
    public PlataformElements Elements { get; private set; }

    /// <summary>
    /// Multiplier used to define max and min sizes of obstacles.
    /// </summary>
    public float ObstacleSizeMultiplier { get; private set; }

    /// <summary>
    /// Multiplier used to define max and min height of targets.
    /// </summary>
    public float TargetHeightMultiplier { get; private set; }

    /// <summary>
    /// Initializes the Stage variables and start the stage.
    /// </summary>
    public override void Start()
    {
        if (Id >= 1 && Id <= 3)
        {
            Elements = PlataformElements.Targets;
            TargetHeightMultiplier = Id == 3 ? GameConstants.Plataform.TargetHeightMultiplier.Med : GameConstants.Plataform.TargetHeightMultiplier.Min;
            SpawnQuantitity = Id == 1 ? GameConstants.Plataform.SpawnQuantity.Stage1_1 : (Id == 2 ? GameConstants.Plataform.SpawnQuantity.Stage1_2 : GameConstants.Plataform.SpawnQuantity.Stage1_3);
            TimeLimit = GameConstants.Plataform.TimeLimits.World1;
        }
        else if (Id >= 4 && Id <= 6)
        {
            Elements = PlataformElements.TargetAndObstacles;
            TargetHeightMultiplier = Id == 4 ? GameConstants.Plataform.TargetHeightMultiplier.Med : GameConstants.Plataform.TargetHeightMultiplier.Max;
            ObstacleSizeMultiplier = Id == 6 ? GameConstants.Plataform.ObstacleSizeMultiplier.Med : GameConstants.Plataform.ObstacleSizeMultiplier.Min;
            SpawnQuantitity = Id == 4 ? GameConstants.Plataform.SpawnQuantity.Stage2_1 : (Id == 5 ? GameConstants.Plataform.SpawnQuantity.Stage2_2 : GameConstants.Plataform.SpawnQuantity.Stage2_3);
            TimeLimit = GameConstants.Plataform.TimeLimits.World2;
        }
        else if (Id >= 7 && Id <= 9)
        {
            Elements = PlataformElements.Obstacles;
            ObstacleSizeMultiplier = Id == 7 ? GameConstants.Plataform.ObstacleSizeMultiplier.Med : GameConstants.Plataform.ObstacleSizeMultiplier.Max;
            SpawnQuantitity = Id == 7 ? GameConstants.Plataform.SpawnQuantity.Stage3_1 : (Id == 8 ? GameConstants.Plataform.SpawnQuantity.Stage3_2 : GameConstants.Plataform.SpawnQuantity.Stage3_3);
            TimeLimit = GameConstants.Plataform.TimeLimits.World3;
        }

        base.Start();
    }

    public void TargetHit()
    {
        Score += IntervalLevel * HeightLevel * GameLevel;
    }

    public void ObstacleAvoided()
    {
        Score += IntervalLevel * SizeLevel * GameLevel;
    }
}
